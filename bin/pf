#!/usr/bin/env perl

# ABSTRACT: find data for sequencing runs
# PODNAME: pf

use v5.10; # for "say"

use strict;
use warnings;

use DateTime;
use Path::Class;
use Try::Tiny;
use Config::Any;

use Bio::Path::Find::App::PathFind;

#-------------------------------------------------------------------------------

# setup. Check for config files

unless ( defined $ENV{PF_CONFIG_FILE} ) {

  say STDERR 'ERROR: no config file defined.' if not defined $ENV{PF_CONFIG_FILE};
  say STDERR <<'EOF_noenv';

Before using the "pf" commands you need to have the PF_CONFIG_FILE environment
variable configured for your shell. Email "path-help@sanger.ac.uk" for help
with setting it up.
EOF_noenv

  exit 1;
}

# make sure the config exists
unless ( -f $ENV{PF_CONFIG_FILE} ) {
  say STDERR qq(ERROR: specified config file ($ENV{PF_CONFIG_FILE}) does not exist);
  exit 1;
}

# and read the config to get the location of the log file
my $ca = Config::Any->load_files( { files => [ $ENV{PF_CONFIG_FILE} ], use_ext => 1 } );
my $cfg = $ca->[0]->{ $ENV{PF_CONFIG_FILE} };
my $log_file = $cfg->{log_file};

unless ( defined $log_file ) {
  say STDERR qq(ERROR: no log file specified by config file);
  exit 1;
}

#-------------------------------------------------------------------------------

# build the log line...
my $username     = ( getpwuid($<) )[0];
my $now          = DateTime->now;
my $script_name  = $0;
my $command_line = join ' ', $now, $username, $script_name, @ARGV;

# and write it to file
my $log_fh;
try {
  $log_fh = file($log_file)->opena;
} catch {
  say STDERR qq(ERROR: can't write to log file specified by config file ($log_file));
  exit 1;
};

say $log_fh $command_line;

close $log_fh;

#-------------------------------------------------------------------------------

# execute the command
try {
  # we need to pass in the location of the configuration
  Bio::Path::Find::App::PathFind->new_with_command(config => $cfg)->run;
} catch {
  # FIXME there's an ugly problem with a couple of the commands, which use
  # FIXME parameterized constraints on attributes (B::P::F::App::PathFind::Map,
  # FIXME for example). If the affected options are given invalid values, we
  # FIXME get an exception from deep down in the bowels of MooseX::App. This
  # FIXME is a hack to catch that exception and try to give a more meaningful
  # FIXME error message to the user.
  if ( m/parameterized_from/ ) {
    say STDERR 'ERROR: there was a problem running the command; check that you are giving valid values for all options';
  }
  else {
    say STDERR $_;
  }
};

exit 0;

