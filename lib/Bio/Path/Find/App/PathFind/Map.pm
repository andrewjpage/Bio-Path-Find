
package Bio::Path::Find::App::PathFind::Map;

# ABSTRACT: Find mapped bam files for lanes

use v5.10; # for "say"

use MooseX::App::Command;
use namespace::autoclean;
use MooseX::StrictConstructor;

use Carp qw ( carp );
use Path::Class;
use Try::Tiny;

use Types::Standard qw(
  ArrayRef
  Str
  +Bool
);

use Bio::Path::Find::Types qw( :types );

use Bio::Path::Find::Lane::Class::Map;
use Bio::Path::Find::Lane::StatusFile;

extends 'Bio::Path::Find::App::PathFind';

with 'Bio::Path::Find::App::Role::Archivist',
     'Bio::Path::Find::App::Role::Linker',
     'Bio::Path::Find::App::Role::Statistician',
     'Bio::Path::Find::App::Role::UsesMappings';

#-------------------------------------------------------------------------------
#- usage text ------------------------------------------------------------------
#-------------------------------------------------------------------------------

# this is used when the "pf" app class builds the list of available commands
command_short_description 'Find mapped bam files for lanes';

# the module POD is used when the users runs "pf man map"

=head1 NAME

pf map - Find mapped bam files for lanes

=head1 USAGE

  pf map --id <id> --type <ID type> [options]

=head1 DESCRIPTION

This pathfind command will return information about mapped assemblies.  Specify
the type of data using C<--type> and give the accession, name or identifier for
the data using C<--id>.

Use "pf man" or "pf man map" to see more information.

=head1 EXAMPLES

  # get a list of bam files for a lane
  pf map -t lane -i 12345_1#1

  # find bam files generated with bwa
  pf map -t lane -i 12345_1 -M bwa

  # find bam files generated by mapping against a specific reference
  pf map -t lane -i 12345_1 -R Streptococcus_suis_P1_7_v1

  # get details (reference, mapper, date) for bam files
  pf map -t lane -i 12345_1 -d

  # generate statistics for a set of mappings
  pf map -t study -i 123 -s study_123_stats.csv

  # create a tar file containing the bam files for a study
  pf map -t study -i 123 -a study_123_bam_files.tar.gz

=cut

=head1 OPTIONS

These are the options that are specific to C<pf map>. Run C<pf man> to see
information about the options that are common to all C<pf> commands.

=over

=item --details, -d

Show the details of each assembly.

=item --mapper, -M <mapper>

Only show bam files that were generated using the specified mapper(s). You can
specify multiple mappers by providing a comma-separated list. The name of the
mapper must be one of: C<bowtie2>, C<bwa>, C<bwa_aln>, C<smalt>, C<ssaha2>,
C<stampy>, C<tophat>.

=item --reference, -R <reference genome>

Only show files generated by mapping against a specific reference genome. The
name of the genome must be exact; use C<pf ref -R> to find the name of a
reference.

=item --stats, -s [<stats filename>]

Write a file with statistics about found mappings. Save to specified filename,
if given.

=item --symlink, -l [<symlink directory>]

Create symlinks to found data. Create links in the specified directory, if
given, or in the current working directory.

=item --archive, -a [<tar filename>}

Create a tar archive containing the found bam files. Save to the specified
filename, if given

=item --no-tar-compression, -u

Don't compress tar archives.

=item --zip, -z [<zip filename>]

Create a zip archive containing data files for found lanes. Save to
specified filename, if given.

=item --rename, -r

Rename filenames when creating archives or symlinks, replacing hashed
(#) with underscores (_).

=back

=cut

=head1 SCENARIOS

=head2 Find mapped assemblies

The default behaviour of the C<pf map> command is to print the paths to
bam files for a set of lanes:

  pf map -t lane -i 12345_1#1

You can also see a few more details about each mapping, using the C<--details>
(C<-d>) option:

  pf map -t lane -i 12345_1#1 -d
  /scratch/pathogen/prokaryotes/seq-pipelines/Escherichia/coli/TRACKING/3893STDY6199423/SLX/15100687/12345_1#27/593103.pe.markdup.bam        Escherichia_coli_ST131_strain_EC958_v1  smalt   2016-03-19T14:52:19

The output now includes four tab-separated columns for each file, giving:

=over

=item full file path

=item reference genome that was used during mapping

=item name of the mapping software used

=item creation date of the mapping

=back

=head2 Show mappings generated by a specific mapper

You can filter the list of returned files in a couple of ways. Some lanes will
be mapped using multiple mappers, so you can specify which mapping program you
need using the C<--mapper> (C<-M>) option:

  pf map -t lane -i 12345_1 -M bwa

You will now see only mappings generated using C<bwa>. If you want to see
mappings generated by more than one mapper, you can use a comma-separated list
of mappers:

  pf map -t lane -i 12345_1 -M bwa,smalt

or you can use the C<-M> option multiple times:

  pf map -t lane -i 12345_1 -M bwa -M smalt

=head2 Show mappings that use a specific reference genome

You can also filter the list of bam files according to which reference
genome they use:

  pf map -t lane -i 12345_1 -R Escherichia_coli_NA114_v2

You can only specify one reference at a time.

The name of the reference must be given exactly. You can find the full, exact
name for a reference using C<pf ref>:

  % pf ref -i Eschericia_coli -R
  Escherichia_coli_0127_H6_E2348_69_v1
  Escherichia_coli_042_v1
  Escherichia_coli_9000_v0.1
  ...

=head2 Archive or link the found files

You can generate a tar file or a zip file containing all of the bam files that
are found:

  pf map -t lane -i 12345_1 -a bams.tar.gz

or

  pf map -t lane -i 12345_1 -z bams.zip

Alternatively, you can create symlinks to the files in a directory of your
choice:

  pf map -t lane -i 12345_1 -l bam_files

=cut

#-------------------------------------------------------------------------------
#- command line options --------------------------------------------------------
#-------------------------------------------------------------------------------

option 'qc' => (
  documentation => 'filter results by lane QC state',
  is            => 'ro',
  isa           => QCState,
  cmd_aliases   => 'q',
);

#-------------------------------------------------------------------------------
#- public attributes -----------------------------------------------------------
#-------------------------------------------------------------------------------

# this is an attribute, not an option, because we don't want it to be settable
# by the user. This command only finds bam files.

has 'filetype' => (
  is      => 'ro',
  isa     => MapType,
  default => 'bam',
);

#-------------------------------------------------------------------------------
#- private attributes ----------------------------------------------------------
#-------------------------------------------------------------------------------

# this is a builder for the "_lane_class" attribute, which is defined on the
# parent class, B::P::F::A::PathFind. The return value specifies the class of
# object that should be returned by the B::P::F::Finder::find_lanes method.

sub _build_lane_class {
  return 'Bio::Path::Find::Lane::Class::Map';
}

#---------------------------------------

# this is a builder that sets the name of the stats output file
#
# overrides a method in the Statistician Role

sub _build_stats_file {
  my $self = shift;
  return file( $self->_renamed_id . '.mapping_stats.csv' );
}

#-------------------------------------------------------------------------------
#- public methods --------------------------------------------------------------
#-------------------------------------------------------------------------------

sub run {
  my $self = shift;

  # TODO fail fast if we're going to overwrite something

  # build the parameters for the finder
  my %finder_params = (
    ids      => $self->_ids,
    type     => $self->_type,
    filetype => 'bam',  # triggers a call to B::P::F::Lane::Class::Map::_get_bam
  );                    # for file finding

  #---------------------------------------

  # these are filters that are applied by the finder

  # when finding lanes, should the finder filter on QC status ?
  $finder_params{qc} = $self->qc if $self->qc;

  # should we look for lanes with the "mapped" bit set on the "processed" bit
  # field ? Turning this off, i.e. setting the command line option
  # "--ignore-processed-flag" will allow the command to return data for lanes
  # that haven't completed the mapping pipeline.
  $finder_params{processed} = Bio::Path::Find::Types::MAPPED_PIPELINE
    unless $self->ignore_processed_flag;

  #---------------------------------------

  # these are filters that are applied by the lanes themselves, when they're
  # finding files to return (see "B::P::F::Lane::Class::Map::_get_bam")

  # when finding files, should the lane restrict the results to files created
  # with a specified mapper ?
  $finder_params{lane_attributes}->{mappers} = $self->mapper
    if $self->mapper;

  # when finding files, should the lane restrict the results to mappings
  # against a specific reference ?
  $finder_params{lane_attributes}->{reference} = $self->reference
    if $self->reference;

  #---------------------------------------

  # find lanes
  my $lanes = $self->_finder->find_lanes(%finder_params);

  if ( scalar @$lanes < 1 ) {
    say STDERR 'No data found.';
    return;
  }

  # should we write out a stats file ?
  $self->_make_stats($lanes) if $self->_stats_flag;

  # print the list of files. Should we show extra info ?
  if ( $self->details ) {
    # yes; print file path, reference, mapper and timestamp
    $_->print_details for @$lanes;
  }
  else {
    # no; just print the paths
    $_->print_paths   for @$lanes;
  }
}

#-------------------------------------------------------------------------------

__PACKAGE__->meta->make_immutable;

1;

